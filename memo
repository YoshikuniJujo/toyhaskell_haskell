2011.08.16 Tue.

toyhaskell を作る。
まずは、interractive な環境における電卓的プログラムを作成するか。
evaluate によってコードから値を導いてみるか。

2011.08.17 Wed.

だいぶいい感じだ。
次は import を実そうしよう。
それととりあえず型せん言は無視するようにしようかな。

それと、そろそろパターンマッチ構文を使えるようにしよう。

その前に型クラスについて考える必要がある。
まずは、[ a ] 型を扱えるようにして、(++) を定義しよう。
その前に、String 型を無くして、[ Char ] として実そうしてみようかな。

2011.08.18 Thu.

次は、String を [ Char ] として定義する。
その前に型について考えたほうが良いかもしれない。

だいぶコードがぐちゃぐちゃになってきたのでコード整理をする。
しかし、そのなかで、Env を [ ( String, Value ) ] ではなく、
[ ( Pattern, Value ) ] として持つべきかもしれないという問題が出てくる。

type Env = [ ( [ String ], Pattern, Value ) ] とするべきかもしれない。
これだけ複雑だと、data Env = Env [ ( [ String ], Pattern, Value ) ]
としたほうが良いだろう。
その前段階として、data Env = Env [ ( String, Value ) ] として、
明示的な interface を定義するべきだろう。

eval の Apply まで refactoring した。
次は eval の Letin から refactoring すること。

Eval の patMatch1 を Value の patMatch1 を使って定義するようにしよう。
